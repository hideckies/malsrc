#ifndef REFLECTIVE_DLL_HPP
#define REFLECTIVE_DLL_HPP

#include <Windows.h>
#include <intrin.h>

#define DLLEXPORT __declspec(dllexport)

// -----------------------------------------------------
// Module/API Hashing
// -----------------------------------------------------

#define HASH_IV								0x35
#define RANDOM_ADDR							0xab10f29f

// Module hashes generated by CalcModuleHashes
#define HASH_MODULE_KERNEL32				0xf4796887
#define HASH_MODULE_NTDLL					0x3cd7873f

// API hashes generated by CalcApiHashes
#define HASH_FUNC_NTFLUSHINSTRUCTIONCACHE   0x3a43951d
#define HASH_FUNC_GETPROCADDRESS			0xafa3e09d
#define HASH_FUNC_LOADLIBRARYA				0x7069f241
#define HASH_FUNC_VIRTUALALLOC				0x5ae0dabf
#define HASH_FUNC_VIRTUALPROTECT			0x927857d9

// -----------------------------------------------------
// APIs Defenition
// -----------------------------------------------------

// NtFlushInstructionCache
typedef NTSTATUS(NTAPI* LPPROC_NTFLUSHINSTRUCTIONCACHE)(HANDLE ProcessHandle, PVOID BaseAddress, SIZE_T Length);
// DllMain
typedef BOOL(WINAPI* LPPROC_DLLMAIN)(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved);
// GetProcAddress
typedef FARPROC(WINAPI* LPPROC_GETPROCADDRESS)(HMODULE hModule, LPCSTR lpProcName);
// LoadLibraryA
typedef HMODULE(WINAPI* LPPROC_LOADLIBRARYA)(LPCSTR lpLibFileName);
// VirtualAlloc
typedef LPVOID(WINAPI* LPPROC_VIRTUALALLOC)(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect);
// VirtualProtect
typedef BOOL(WINAPI* LPPROC_VIRTUALPROTECT)(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);

// -----------------------------------------------------
// Custom Functions
// -----------------------------------------------------

VOID* Memcpy(PVOID pDest, PVOID pSrc, SIZE_T dwSize);
ULONG StringToHashModule(WCHAR* pwStr, SIZE_T dwStrLen);
DWORD StringToHashFunc(CHAR* str);
PVOID GetModuleByHash(DWORD dwHash);
PVOID GetProcAddressByHash(HMODULE hModule, DWORD dwHash);
VOID ResolveIAT(
    LPVOID lpVirtualAddr,
    LPVOID lpIatDir,
    LPPROC_LOADLIBRARYA lpLoadLibraryA,
    LPPROC_GETPROCADDRESS lpGetProcAddress
);
VOID ReallocateSections(
    LPVOID lpVirtualAddr,
    LPVOID lpImageBase,
    LPVOID lpBaseRelocDir,
    PIMAGE_NT_HEADERS pNtHeaders
);
extern "C" DLLEXPORT ULONG_PTR caller(VOID);
extern "C" DLLEXPORT ULONG_PTR WINAPI ReflectiveLoader(LPVOID lpParameter);
BOOL APIENTRY DllMain(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved);

#endif // REFLECTIVE_DLL_HPP